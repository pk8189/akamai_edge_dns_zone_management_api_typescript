/**
 * File Generated by Sideko (sideko.dev)
 */
import {
  CoreResourceClient,
  CoreClient,
  RequestOptions,
  ApiPromise,
} from "akamai_edge_dns_zone_management_api/core";
import { UsedByClient } from "akamai_edge_dns_zone_management_api/resources/zones/key/used-by";
import * as requests from "akamai_edge_dns_zone_management_api/resources/zones/key/request-types";
import qs from "qs";
import * as types from "akamai_edge_dns_zone_management_api/types";

export class KeyClient extends CoreResourceClient {
  // register resources (keep comment for code generation)
  usedBy: UsedByClient;

  constructor(client: CoreClient) {
    super(client);

    // init resources (keep comment for code generation)
    this.usedBy = new UsedByClient(this._client);
  }

  // register api methods (keep comment for code generation)

  /**
   * Creates or replaces the current TSIG Key for this zone. If other zones use the same key, does not modify those zones.
   */
  put(request: requests.PutRequest, opts?: RequestOptions): ApiPromise<null> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "put",
      path: `/zones/${request.zone}/key`,
      query: [qs.stringify({ accountSwitchKey: request.accountSwitchKey })],
      contentType: "application/json",
      body: request.data,
      responseType: "json",
      opts,
    });
  }

  /**
   * Retrieves the TSIG Key data for this zone. Includes a count of zones that use this key. Returns a 404 error if the zone does not have a TSIG key.
   */
  list(
    request: requests.ListRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.GetZonesZoneKeyResponse> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "get",
      path: `/zones/${request.zone}/key`,
      query: [qs.stringify({ accountSwitchKey: request.accountSwitchKey })],
      responseType: "json",
      opts,
    });
  }

  /**
   * Removes the TSIG Key for this zone. This action does not affect any other zone, even if they share the same TSIG key as this zone. If the zone does not currently have a key, no actions are taken and no error is thrown.
   */
  delete(
    request: requests.DeleteRequest,
    opts?: RequestOptions,
  ): ApiPromise<null> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "delete",
      path: `/zones/${request.zone}/key`,
      query: [qs.stringify({ accountSwitchKey: request.accountSwitchKey })],
      responseType: "json",
      opts,
    });
  }
}
