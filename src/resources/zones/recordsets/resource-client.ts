/**
 * File Generated by Sideko (sideko.dev)
 */
import {
  CoreResourceClient,
  CoreClient,
  RequestOptions,
  ApiPromise,
} from "akamai_edge_dns_zone_management_api/core";
import * as requests from "akamai_edge_dns_zone_management_api/resources/zones/recordsets/request-types";
import * as types from "akamai_edge_dns_zone_management_api/types";
import qs from "qs";

export class RecordsetsClient extends CoreResourceClient {
  // register resources (keep comment for code generation)

  constructor(client: CoreClient) {
    super(client);

    // init resources (keep comment for code generation)
  }

  // register api methods (keep comment for code generation)

  /**
   * Replaces the entire list of Record Sets that currently exists with the list provided.
   */
  put(request: requests.PutRequest, opts?: RequestOptions): ApiPromise<null> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "put",
      path: `/zones/${request.zone}/recordsets`,
      query: [qs.stringify({ accountSwitchKey: request.accountSwitchKey })],
      contentType: "application/json",
      body: request.data,
      responseType: "json",
      opts,
    });
  }

  /**
   * Creates multiple new Record Sets on this Zone. If any record set fails to create, for example, because a record set with that name and type already exists, the entire operation fails.
   */
  create(
    request: requests.CreateRequest,
    opts?: RequestOptions,
  ): ApiPromise<null> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "post",
      path: `/zones/${request.zone}/recordsets`,
      query: [qs.stringify({ accountSwitchKey: request.accountSwitchKey })],
      contentType: "application/json",
      body: request.data,
      responseType: "json",
      opts,
    });
  }

  /**
   * Lists all Record Sets for this Zone. It works only for `PRIMARY` and `SECONDARY` zones. This operation is [paginated](https://techdocs.akamai.com/edge-dns/reference/pagination).
   */
  list(
    request: requests.ListRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.GetZonesZoneRecordsetsResponse> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "get",
      path: `/zones/${request.zone}/recordsets`,
      query: [
        qs.stringify({ accountSwitchKey: request.accountSwitchKey }),
        qs.stringify({ page: request.page }),
        qs.stringify({ pageSize: request.pageSize }),
        qs.stringify({ search: request.search }),
        qs.stringify({ showAll: request.showAll }),
        qs.stringify({ sortBy: request.sortBy }),
        qs.stringify({ types: request.types }),
      ],
      responseType: "json",
      opts,
    });
  }
}
