/**
 * File Generated by Sideko (sideko.dev)
 */
import {
  CoreResourceClient,
  CoreClient,
  RequestOptions,
  ApiPromise,
} from "akamai_edge_dns_zone_management_api/core";
import { KeyClient } from "akamai_edge_dns_zone_management_api/resources/zones/key";
import { NamesClient } from "akamai_edge_dns_zone_management_api/resources/zones/names";
import { CreateRequestsClient } from "akamai_edge_dns_zone_management_api/resources/zones/create-requests";
import { DeleteRequestsClient } from "akamai_edge_dns_zone_management_api/resources/zones/delete-requests";
import { AliasesClient } from "akamai_edge_dns_zone_management_api/resources/zones/aliases";
import { ContractClient } from "akamai_edge_dns_zone_management_api/resources/zones/contract";
import { RecordsetsClient } from "akamai_edge_dns_zone_management_api/resources/zones/recordsets";
import { VersionsClient } from "akamai_edge_dns_zone_management_api/resources/zones/versions";
import { ZoneFileClient } from "akamai_edge_dns_zone_management_api/resources/zones/zone-file";
import { DnsSecStatusClient } from "akamai_edge_dns_zone_management_api/resources/zones/dns-sec-status";
import { ZoneTransferStatusClient } from "akamai_edge_dns_zone_management_api/resources/zones/zone-transfer-status";
import * as requests from "akamai_edge_dns_zone_management_api/resources/zones/request-types";
import * as types from "akamai_edge_dns_zone_management_api/types";
import qs from "qs";

export class ZonesClient extends CoreResourceClient {
  // register resources (keep comment for code generation)
  key: KeyClient;
  names: NamesClient;
  createRequests: CreateRequestsClient;
  deleteRequests: DeleteRequestsClient;
  aliases: AliasesClient;
  contract: ContractClient;
  recordsets: RecordsetsClient;
  versions: VersionsClient;
  zoneFile: ZoneFileClient;
  dnsSecStatus: DnsSecStatusClient;
  zoneTransferStatus: ZoneTransferStatusClient;

  constructor(client: CoreClient) {
    super(client);

    // init resources (keep comment for code generation)
    this.key = new KeyClient(this._client);
    this.names = new NamesClient(this._client);
    this.createRequests = new CreateRequestsClient(this._client);
    this.deleteRequests = new DeleteRequestsClient(this._client);
    this.aliases = new AliasesClient(this._client);
    this.contract = new ContractClient(this._client);
    this.recordsets = new RecordsetsClient(this._client);
    this.versions = new VersionsClient(this._client);
    this.zoneFile = new ZoneFileClient(this._client);
    this.dnsSecStatus = new DnsSecStatusClient(this._client);
    this.zoneTransferStatus = new ZoneTransferStatusClient(this._client);
  }

  // register api methods (keep comment for code generation)

  /**
   * Modifies a zone. You can't change the zone `type` with this operation.
   */
  put(
    request: requests.PutRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.PutZonesZoneResponse> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "put",
      path: `/zones/${request.zone}`,
      query: [
        qs.stringify({
          skipSignAndServeSafetyCheck: request.skipSignAndServeSafetyCheck,
        }),
        qs.stringify({ accountSwitchKey: request.accountSwitchKey }),
      ],
      contentType: "application/json",
      body: request.data,
      responseType: "json",
      opts,
    });
  }

  /**
   * Creates a new zone. Carefully review the documentation for which fields are relevant to the type of zone you are creating.
   */
  create(
    request: requests.CreateRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.PostZonesResponse> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "post",
      path: "/zones",
      query: [
        qs.stringify({ contractId: request.contractId }),
        qs.stringify({ gid: request.gid }),
        qs.stringify({ accountSwitchKey: request.accountSwitchKey }),
      ],
      contentType: "application/json",
      body: request.data,
      responseType: "json",
      opts,
    });
  }

  /**
   * Retrieves the metadata for this zone. Does not include record sets.
   */
  get(
    request: requests.GetRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.GetZonesZoneResponse> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "get",
      path: `/zones/${request.zone}`,
      query: [qs.stringify({ accountSwitchKey: request.accountSwitchKey })],
      responseType: "json",
      opts,
    });
  }

  /**
   * Get a list of all zones that the current user has access to manage. Includes the version identifier, propagation status, and SOA serial number for the most recently activated version. This operation is [paginated](https://techdocs.akamai.com/edge-dns/reference/use-pagination).
   */
  list(
    request: requests.ListRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.GetZonesResponse> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "get",
      path: "/zones",
      query: [
        qs.stringify({ accountSwitchKey: request.accountSwitchKey }),
        qs.stringify({ contractIds: request.contractIds }),
        qs.stringify({ page: request.page }),
        qs.stringify({ pageSize: request.pageSize }),
        qs.stringify({ search: request.search }),
        qs.stringify({ showAll: request.showAll }),
        qs.stringify({ sortBy: request.sortBy }),
        qs.stringify({ subzoneGrant: request.subzoneGrant }),
        qs.stringify({ types: request.types }),
      ],
      responseType: "json",
      opts,
    });
  }
}
