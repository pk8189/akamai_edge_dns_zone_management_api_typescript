/**
 * File Generated by Sideko (sideko.dev)
 */
import {
  CoreResourceClient,
  CoreClient,
  RequestOptions,
  ApiPromise,
} from "akamai_edge_dns_zone_management_api/core";
import { ResultClient } from "akamai_edge_dns_zone_management_api/resources/zones/create-requests/result";
import * as requests from "akamai_edge_dns_zone_management_api/resources/zones/create-requests/request-types";
import * as types from "akamai_edge_dns_zone_management_api/types";
import qs from "qs";

export class CreateRequestsClient extends CoreResourceClient {
  // register resources (keep comment for code generation)
  result: ResultClient;

  constructor(client: CoreClient) {
    super(client);

    // init resources (keep comment for code generation)
    this.result = new ResultClient(this._client);
  }

  // register api methods (keep comment for code generation)

  /**
   * Submits a request to create one or more new Zones asynchronously. The request body contains a JSON array. Each object in the array contains the data necessary to create a zone. All zones are created on the same contract and group.  An offline task creates the new zones. You can use the response's `requestId` to check the task's status and view its results once it completes.
   */
  create(
    request: requests.CreateRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.PostZonesCreateRequestsResponse> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "post",
      path: "/zones/create-requests",
      query: [
        qs.stringify({ contractId: request.contractId }),
        qs.stringify({ gid: request.gid }),
        qs.stringify({ accountSwitchKey: request.accountSwitchKey }),
      ],
      contentType: "application/json",
      body: request.data,
      responseType: "json",
      opts,
    });
  }

  /**
   * Retrieves the current status of a running or completed request. The `requestId` was returned when the create request was initiated.
   */
  get(
    request: requests.GetRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.GetZonesCreateRequestsRequestIdResponse> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "get",
      path: `/zones/create-requests/${request.requestId}`,
      query: [qs.stringify({ accountSwitchKey: request.accountSwitchKey })],
      responseType: "json",
      opts,
    });
  }
}
