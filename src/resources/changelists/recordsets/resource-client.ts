/**
 * File Generated by Sideko (sideko.dev)
 */
import {
  CoreResourceClient,
  CoreClient,
  RequestOptions,
  ApiPromise,
} from "akamai_edge_dns_zone_management_api/core";
import { AddChangeClient } from "akamai_edge_dns_zone_management_api/resources/changelists/recordsets/add-change";
import * as requests from "akamai_edge_dns_zone_management_api/resources/changelists/recordsets/request-types";
import * as types from "akamai_edge_dns_zone_management_api/types";
import qs from "qs";

export class RecordsetsClient extends CoreResourceClient {
  // register resources (keep comment for code generation)
  addChange: AddChangeClient;

  constructor(client: CoreClient) {
    super(client);

    // init resources (keep comment for code generation)
    this.addChange = new AddChangeClient(this._client);
  }

  // register api methods (keep comment for code generation)

  /**
   * Replaces your change list's record sets with the contents of a master zone file.
   */
  create(
    request: requests.CreateRequest,
    opts?: RequestOptions,
  ): ApiPromise<null> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "post",
      path: `/changelists/${request.zone}/recordsets`,
      query: [qs.stringify({ accountSwitchKey: request.accountSwitchKey })],
      contentType: "text/dns",
      body: request.data,
      responseType: "json",
      opts,
    });
  }

  /**
   * Retrieves the current list of record sets based on the selected change list. The record sets returned reflect any Changes added to this change list. This call works even if the change list is stale. This operation is (paginated](ref:use-pagination).
   */
  list(
    request: requests.ListRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.GetChangelistsZoneRecordsetsResponse> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "get",
      path: `/changelists/${request.zone}/recordsets`,
      query: [
        qs.stringify({ accountSwitchKey: request.accountSwitchKey }),
        qs.stringify({ page: request.page }),
        qs.stringify({ pageSize: request.pageSize }),
        qs.stringify({ search: request.search }),
        qs.stringify({ showAll: request.showAll }),
        qs.stringify({ sortBy: request.sortBy }),
        qs.stringify({ types: request.types }),
      ],
      responseType: "json",
      opts,
    });
  }
}
